ENTRY(EntryPoint)
MEMORY
{
    IRAM : ORIGIN = 0x10000000, LENGTH = 0x00010000
    SRAM : ORIGIN = 0x20000000, LENGTH = 0x00008000
    ERAM : ORIGIN = 0xA0000000, LENGTH = 0x01000000
    LR_FLASH : ORIGIN = 0x00000000, LENGTH = 0x00080000    
}
SECTIONS
{
    ER_FLASH 0x00005400 :
    {
        * (i.EntryPoint)
        * (SectionForBootstrapOperations)
        * (SectionForFlashOperations)
        * (.text*)
        * (i.*)
        * (.rodata*)
        * (rodata)
        * (.constdata*)
        * (.conststring*)
        * (.glue*)
        * (tinyclr_metadata)
        PROVIDE(_sbrk = .);
        PROVIDE(_write = .);
        PROVIDE(_close = .);
        PROVIDE(_fstat = .);
        PROVIDE(_lseek = .);
        PROVIDE(_read = .);
        PROVIDE(_exit = .);
        PROVIDE(_getpid = .);
        PROVIDE(_kill = .);
        PROVIDE(abort = .);
        PROVIDE(__errno = .);
        PROVIDE(_read = .);
        PROVIDE(isatty = .);
        PROVIDE(_isatty = .);
    }>LR_FLASH

    ER_VECTORS 0x10000000:
    {
        * (VectorTable)
    }>IRAM

    ER_RAM_RW 0xA0020000 :
    {
        * (rwdata)
        * (.data*)
    }>ERAM AT>LR_FLASH

    .bss (NOLOAD) : ALIGN(0x8)
    {
        * (.bss*)
        * (.zidata*)
        PROVIDE(__exidx_start = .);
        PROVIDE(__exidx_end = .);
        * (COMMON)
    }>ERAM

    ER_RAM_RO 0x20000000 :
    {
        * (SectionForCodeReadOnlyRAM)
    }>SRAM AT>LR_FLASH

    /DISCARD/  :
    {
        * (.ARM.exidx*)
        * (.ARM.extab*)
    }
    ER_HEAP_BEGIN 0xA0200000 :
    {
        * (SectionForHeapBegin)
    }>ERAM

    ER_HEAP_END 0xA0F00000 - 0x8 :
    {
        * (SectionForHeapEnd)
    }>ERAM
    
    ER_RLP_BEGIN 0xA0F00000 :
    {
        * (SectionForRlpBegin)
    }>IRAM
    
    ER_RLP_END 0xA1000000 - 0x08: 
    {
        * (SectionForRlpEnd)
    }>IRAM
    
    ER_STACK_BOTTOM 0x10000400 :
    {
        * (SectionForStackBottom)
    }>IRAM
    ER_STACK_TOP 0x10010000 - 0x8 :
    {
        * (SectionForStackTop +LAST)
    }>IRAM
}
Load$$ER_FLASH$$Base = LOADADDR(ER_FLASH);
Image$$ER_FLASH$$Length = SIZEOF(ER_FLASH);
Image$$ER_RAM_RO$$Base = ADDR(ER_RAM_RO);
Image$$ER_RAM_RO$$Length = SIZEOF(ER_RAM_RO);
Load$$ER_RAM_RO$$Base = LOADADDR(ER_RAM_RO);
Image$$ER_RAM_RW$$Base = ADDR(ER_RAM_RW);
Image$$ER_RAM_RW$$Length = SIZEOF(ER_RAM_RW);
Load$$ER_RAM_RW$$Base = LOADADDR(ER_RAM_RW);
Image$$ER_RAM_RW$$ZI$$Base = ADDR(.bss);
Image$$ER_RAM_RW$$ZI$$Length = SIZEOF(.bss);
Load$$ER_RLP$$Base = LOADADDR(ER_RLP_BEGIN);
Image$$ER_RLP$$Length = LOADADDR(ER_RLP_END) - LOADADDR(ER_RLP_BEGIN);
__use_no_semihosting_swi = 0;
